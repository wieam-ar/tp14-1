import kotlinx.coroutines.*

fun main() = runBlocking {
    println(" Exemple avec Job classique")

    // Cr√©ation d‚Äôun scope avec un Job
    val job = Job()
    val scope = CoroutineScope(Dispatchers.Default + job)

    scope.launch {
        delay(500)
        println(" Coroutine 1 : Erreur d√©tect√©e !")
        throw Exception("Erreur dans Coroutine 1")
    }

    scope.launch {
        try {
            delay(1000)
            println("Coroutine 2 : Termin√© avec succ√®s !")
        } catch (e: CancellationException) {
            println("Coroutine 2 : Annul√©e √† cause de l‚Äôerreur de la premi√®re")
        }
    }

    // On attend la fin des t√¢ches
    delay(1500)
    println("üîö Fin de l‚Äôexemple avec Job\n")
}
